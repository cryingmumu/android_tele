
diff --git a/data/etc/privapp-permissions-platform.xml b/data/etc/privapp-permissions-platform.xml
index eed8fd7..5d47698 100755
--- a/data/etc/privapp-permissions-platform.xml
+++ b/data/etc/privapp-permissions-platform.xml
@@ -357,6 +357,7 @@ applications that come with the platform
         <permission name="android.permission.WRITE_SECURE_SETTINGS"/>
         <!-- SPRD: add for bug884751 -->
         <permission name="android.permission.READ_PHONE_STATE"/>
+        <permission name="android.permission.WRITE_APN_SETTINGS"/>
     </privapp-permissions>
 
     <privapp-permissions package="com.android.tv">
diff --git a/packages/SystemUI/AndroidManifest.xml b/packages/SystemUI/AndroidManifest.xml
index 31dbcac..caf2595 100644
--- a/packages/SystemUI/AndroidManifest.xml
+++ b/packages/SystemUI/AndroidManifest.xml
@@ -202,6 +202,8 @@
 
     <uses-permission android:name="android.permission.READ_PHONE_STATE" />
 
+    <uses-permission android:name="android.permission.WRITE_APN_SETTINGS" />
+
     <!--SPRD: Bug 692453 customize protected broadcast -->
     <protected-broadcast android:name = "com.action.hide_navigationbar"/>
     <!-- @} -->
@@ -604,5 +606,19 @@
                 <action android:name="com.android.intent.action.SHOW_KEYBOARD_SHORTCUTS" />
             </intent-filter>
         </receiver>
+
+        <activity
+            android:name="com.sprd.systemui.SimDataconnectSelect"
+            android:excludeFromRecents="true"
+            android:label="@string/data_connect_select"
+            android:theme="@*android:style/Theme.Material.Light.Dialog.Alert">
+            <intent-filter>
+                <action android:name="multisim.setting.dialog.setting" />
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+            </intent-filter>
+        </activity>
+
     </application>
 </manifest>
diff --git a/packages/SystemUI/res/layout/sim_dataconnect_select.xml b/packages/SystemUI/res/layout/sim_dataconnect_select.xml
new file mode 100644
index 0000000..7ef9825
--- /dev/null
+++ b/packages/SystemUI/res/layout/sim_dataconnect_select.xml
@@ -0,0 +1,105 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2009 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="65dip"
+    android:paddingBottom="10dip"
+    android:paddingTop="32dip"
+    android:orientation="vertical">
+
+    <LinearLayout
+        android:id="@+id/key_sim1"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:minHeight="?android:attr/listPreferredItemHeight"
+        android:layout_marginStart="13dip"
+        android:orientation="horizontal">
+
+    <TextView
+        android:id="@+id/key_sim1_tv"
+        android:layout_width="0dip"
+        android:layout_height="wrap_content"
+        android:layout_weight="1"
+        android:layout_marginStart="10dip"
+        android:textSize="17sp"
+        android:text="@string/mobile_data_sim1"
+        android:textAppearance="?android:attr/textAppearanceLarge"
+        android:textColor="?android:attr/textColorPrimary"/>
+    <RadioButton
+        android:id="@+id/key_sim1_rb"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginEnd="10dip">
+    </RadioButton>
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/key_sim2"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:minHeight="?android:attr/listPreferredItemHeight"
+        android:layout_marginStart="13dip"
+        android:orientation="horizontal">
+
+    <TextView
+        android:id="@+id/key_sim2_tv"
+        android:layout_width="0dip"
+        android:layout_height="wrap_content"
+        android:layout_weight="1"
+        android:layout_marginStart="10dip"
+        android:textSize="17sp"
+        android:text="@string/mobile_data_sim2"
+        android:textAppearance="?android:attr/textAppearanceLarge"
+        android:textColor="?android:attr/textColorPrimary"/>
+    <RadioButton
+        android:id="@+id/key_sim2_rb"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginEnd="10dip">
+    </RadioButton>
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/key_off"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:minHeight="?android:attr/listPreferredItemHeight"
+        android:layout_marginStart="13dip"
+        android:orientation="horizontal">
+
+        <TextView
+        android:id="@+id/key_off_tv"
+        android:layout_width="0dip"
+        android:layout_height="wrap_content"
+        android:layout_weight="1"
+        android:layout_marginStart="10dip"
+        android:textSize="17sp"
+        android:text="@string/mobile_data_off"
+        android:textAppearance="?android:attr/textAppearanceLarge"
+        android:textColor="?android:attr/textColorPrimary"/>
+
+    <RadioButton
+        android:id="@+id/key_off_rb"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentEnd="true"
+        android:layout_marginEnd="10dip">
+    </RadioButton>
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/packages/SystemUI/res/values/strings.xml b/packages/SystemUI/res/values/strings.xml
index 4e6d636..89c9068 100644
--- a/packages/SystemUI/res/values/strings.xml
+++ b/packages/SystemUI/res/values/strings.xml
@@ -2078,4 +2078,13 @@
         <item>334050</item>
         <item>334090</item>
     </string-array>
+
+    <string name="mobile_data_off">Off</string>
+    <string name="mobile_data_sim1">SIM1</string>
+    <string name="mobile_data_sim2">SIM2</string>
+    <string name="set_data_failed">fail</string>
+    <string name="set_data_success">success</string>
+    <string name="data_connect_select">Data connection</string>
+    <string name="data_connect_select_confirm">Turn off data connection?</string>
+
 </resources>
diff --git a/packages/SystemUI/src/com/sprd/systemui/SimDataconnectSelect.java b/packages/SystemUI/src/com/sprd/systemui/SimDataconnectSelect.java
new file mode 100644
index 0000000..5e48242
--- /dev/null
+++ b/packages/SystemUI/src/com/sprd/systemui/SimDataconnectSelect.java
@@ -0,0 +1,524 @@
+package com.sprd.systemui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.net.ConnectivityManager;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.os.AsyncResult;
+import android.util.Log;
+import android.view.View;
+import android.view.Window;
+import android.widget.RadioButton;
+import android.widget.Toast;
+import android.preference.ListPreference;
+import android.preference.PreferenceActivity;
+import android.provider.Settings;
+import android.provider.Settings.SettingNotFoundException;
+import com.android.systemui.R;
+import android.provider.Settings;
+import android.telecom.PhoneAccount;
+import android.telecom.PhoneAccountHandle;
+import android.telecom.TelecomManager;
+import android.telephony.PhoneStateListener;
+import android.telephony.ServiceState;
+import android.telephony.SubscriptionInfo;
+import android.telephony.SubscriptionManager;
+import android.telephony.TelephonyManager;
+import android.app.StatusBarManager;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import com.android.internal.telephony.ITelephony;
+import com.android.internal.telephony.Phone;
+import com.android.internal.telephony.PhoneConstants;
+import com.android.internal.telephony.TelephonyIntents;
+import static android.telephony.TelephonyManager.SIM_STATE_READY;
+import android.widget.TextView;
+
+import android.view.WindowManager;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.view.LayoutInflater;
+
+
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+
+public class SimDataconnectSelect extends Activity implements View.OnClickListener,
+ DialogInterface.OnDismissListener {
+
+    private static final String TAG = "SimDataconnectSelect";
+
+    private static final String KEY_DATA_LIST = "data_list";
+
+    public static final String SHARED_PRE_NAME = "SimDataconnectSelect";
+    public static final String SP_MOBILE_DATA_INDEX = "mobile_data_index";
+
+    public static final String EXTRA_MOBILE_DATA_INDEX = "md_index";
+
+    private static final int MOBILE_DATA_NULL = -1;
+    private static final int MOBILE_DATA_SIM1 = 0;
+    private static final int MOBILE_DATA_SIM2 = 1;
+    public static final int MOBILE_DATA_OFF = 2;
+    private static final int MOBILE_DATA_TYPE_COUNT = MOBILE_DATA_OFF + 1;
+
+    private static final int MSG_UPDATA_SUBCSRIPTION = 1000;
+    private static final int SHOW_SET_DATA_PROGRESSDIALOG = 1001;
+    private static final int SHOW_ALERTDIALOG = 4;
+
+    private int mCurrMobile;
+
+    private TextView mTextSim1;
+    private TextView mTextSim2;
+    private RadioButton mRadioSim1;
+    private RadioButton mRadioSim2;
+    private RadioButton mRadioOff;
+
+    private AlertDialog mAlertDialog;
+    private AlertDialog ConfirmAlertDialog;
+    private View mView;
+    private View mSim1Layout;
+    private View mSim2Layout;
+    private View mOffLayout;
+
+    private RadioButton[] mRadios = new RadioButton[MOBILE_DATA_TYPE_COUNT];
+
+    int[] mEntryValuesSubid = new int[MOBILE_DATA_TYPE_COUNT];
+
+    String mDisplaynameSim1 = "SIM1";
+    String mDisplaynameSim2 = "SIM2";
+
+    // a list store the subInfo variable
+    private List<SubscriptionInfo> mSubInfoList = new ArrayList<SubscriptionInfo>();
+
+    private int mResetSubId = SubscriptionManager.INVALID_SUBSCRIPTION_ID;
+
+    private int mActiveSubCount;
+
+    private TelephonyManager mTelephonyManager;
+
+    private TelecomManager mTeleCommManager;
+
+    private ITelephony mTelephony;
+
+    private StatusBarManager mStatusBarManager;
+
+    private SharedPreferences mSharedPre;
+
+    int offindex = 0;
+
+    private SubscriptionManager mSubscriptionManager = null;
+    private Handler mHandler = new Handler() {
+
+        @Override
+        public void handleMessage(Message msg) {
+            switch (msg.what) {
+
+            case SHOW_SET_DATA_PROGRESSDIALOG:
+                break;
+            case MSG_UPDATA_SUBCSRIPTION:
+                setDataSubscriptionDone(msg);
+                break;
+            case SHOW_ALERTDIALOG:
+                String dataChangedMessage = (String) msg.obj;
+                break;
+            default:
+                break;
+            }
+        }
+
+    };
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        mSubscriptionManager = SubscriptionManager.from(this);
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        getActiveSubscriber();
+        initUI_alertdialog();
+        showSelectDialog();
+    }
+
+    public void onPause() {
+        super.onPause();
+        Log.d(TAG, "OnPause()");
+        setStatusBarEnableStatus(true);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        initMobileDataIndex();
+        updateState_alertdialog();
+    }
+
+    private void initMobileDataIndex() {
+        if (mSharedPre == null) {
+            mSharedPre = getSharedPreferences(SHARED_PRE_NAME,
+                    Context.MODE_PRIVATE);
+        }
+        int index;
+        int subid;
+        index = MOBILE_DATA_NULL;
+
+        if (!mTelephonyManager.getDataEnabled()) {
+            index = MOBILE_DATA_OFF;
+        } else {
+            Log.d(TAG, "[getDefaultDataSubId] subId_index= " + index);
+            subid = SubscriptionManager.getDefaultDataSubscriptionId();
+            index = SubscriptionManager.getSlotIndex(subid);
+            Log.d(TAG, "[getDefaultDataSubId] subId_subid= " + subid
+                    + ", index" + index);
+            if (index == -1) {
+                index = MOBILE_DATA_OFF;
+            }
+        }
+
+        mCurrMobile = index;
+        mRadios[index].setChecked(true);
+    }
+
+    private int getDataSubscription() {
+        int subscription = 0;
+
+        try {
+            subscription = Settings.Global.getInt(getContentResolver(),
+                    Settings.Global.MULTI_SIM_DATA_CALL_SUBSCRIPTION);
+        } catch (SettingNotFoundException snfe) {
+            Log.e(TAG, "Settings Exception Reading Dual Sim Data Call Values");
+        }
+
+        return subscription;
+    }
+
+    public List<SubscriptionInfo> getSortedSubInfoList(Context context) {
+        List<SubscriptionInfo> subInfos = mSubscriptionManager.getActiveSubscriptionInfoList();
+        if (subInfos != null) {
+            Collections.sort(subInfos, new Comparator<SubscriptionInfo>() {
+
+                @Override
+                public int compare(SubscriptionInfo arg0, SubscriptionInfo arg1) {
+                    int flag = arg0.getSubscriptionId() - arg1.getSubscriptionId();
+                    if (flag == 0) {
+                        return (int) (arg0.getSubscriptionId() - arg1.getSubscriptionId());
+                    }
+                    return flag;
+                }
+            });
+        }
+        return subInfos;
+    }
+
+    private void getActiveSubscriber() {
+        mSubInfoList = getSortedSubInfoList(this);
+        mActiveSubCount = mSubInfoList == null ? 0 : mSubInfoList.size();
+        mTelephonyManager = TelephonyManager.from(this);
+        mTeleCommManager = TelecomManager.from(this);
+        mTelephony = ITelephony.Stub.asInterface(ServiceManager
+                .getService(Context.TELEPHONY_SERVICE));
+
+         if (mSubInfoList != null) {
+
+            for (int i = 0; i < mActiveSubCount; i++) {
+                SubscriptionInfo subscriptionInfo = mSubInfoList.get(i);
+                int slotid = subscriptionInfo.getSimSlotIndex();
+                mEntryValuesSubid[slotid]= subscriptionInfo.getSubscriptionId();
+                if(slotid == 1)
+                    mDisplaynameSim2 = (String) subscriptionInfo.getDisplayName();
+                else
+                    mDisplaynameSim1 = (String) subscriptionInfo.getDisplayName();
+                Log.d(TAG,"[getActiveSubscriber]  i =" +i +", slotid =" +slotid +" ,subId= " + subscriptionInfo.getSubscriptionId());
+
+            }
+        }
+
+    }
+
+    private void switchDataDefaultSub(int subId) {
+        mResetSubId = SubscriptionManager.getDefaultDataSubscriptionId();
+        if (SubscriptionManager.isValidSubscriptionId(subId) &&
+                subId != SubscriptionManager.getDefaultDataSubscriptionId()) {
+            mSubscriptionManager.setDefaultDataSubId(subId);
+                            Log.d(TAG,"[switchDataDefaultSub]  ,  subId= " + subId);
+
+        }
+    }
+
+    private void showProgressDlg(int dialogMsg) {
+        Log.d(TAG, "showProgressDlg() with dialogMsg = " + dialogMsg);
+
+    }
+
+    private void setStatusBarEnableStatus(boolean enabled) {
+        Log.i(TAG, "setStatusBarEnableStatus(" + enabled + ")");
+        if (mStatusBarManager == null) {
+            mStatusBarManager = (StatusBarManager) getSystemService(Context.STATUS_BAR_SERVICE);
+        }
+        if (mStatusBarManager != null) {
+            if (enabled) {
+                mStatusBarManager.disable(StatusBarManager.DISABLE_NONE);
+            } else {
+                mStatusBarManager.disable(StatusBarManager.DISABLE_EXPAND |
+                        StatusBarManager.DISABLE_RECENT |
+                        StatusBarManager.DISABLE_HOME);
+            }
+        } else {
+            Log.e(TAG, "Fail to get status bar instance");
+        }
+    }
+
+    private void resetDefaultDataSubId() {
+        Log.d(TAG, "resetDefaultDataSubId()... + resetSubId: " + mResetSubId);
+        mSubscriptionManager.setDefaultDataSubId(mResetSubId);
+    }
+
+    private void setDataPreferredSubscription(int subscription) {
+        mHandler.sendEmptyMessage(SHOW_SET_DATA_PROGRESSDIALOG);
+        Message setDdsMsg = Message
+                .obtain(mHandler, MSG_UPDATA_SUBCSRIPTION, 0);
+        switchDataDefaultSub(subscription);
+    }
+
+    protected void setDataSubscriptionDone(Message msg) {
+        AsyncResult ar = (AsyncResult) msg.obj;
+        String status;
+        Message message = mHandler.obtainMessage(SHOW_ALERTDIALOG);
+        if (ar.exception != null) {
+            status = getResources().getString(R.string.set_data_failed);
+            message.obj = status;
+            mHandler.sendMessage(message);
+            return;
+        }
+
+        boolean result = (Boolean) ar.result;
+        Log.d(TAG, "setDataSubscriptionDone: result = " + result + ", sub = "
+                + msg.arg1);
+        if (result == true) {
+
+            status = getResources().getString(R.string.set_data_success);
+            Toast toast = Toast.makeText(this, status, Toast.LENGTH_LONG);
+            toast.show();
+            saveMobileDataIndex();
+        } else {
+            status = getResources().getString(R.string.set_data_failed);
+            message.obj = status;
+            mHandler.sendMessage(message);
+        }
+    }
+
+    public void onClick(View v) {
+        resetRadio();
+
+        int id = v.getId();
+        int index = 0;
+        switch (id) {
+        case R.id.key_sim1:
+        case R.id.key_sim1_rb:
+            index = MOBILE_DATA_SIM1;
+            mRadioSim1.setChecked(true);
+            Log.d(TAG, "R.id.key_sim1");
+            break;
+        case R.id.key_sim2:
+        case R.id.key_sim2_rb:
+            index = MOBILE_DATA_SIM2;
+            mRadioSim2.setChecked(true);
+            Log.d(TAG, "R.id.key_sim2");
+            break;
+        case R.id.key_off:
+        case R.id.key_off_rb:
+            offindex = 1;
+            ConfirmAlertDialog = new AlertDialog.Builder(this)
+                    .setIconAttribute(android.R.attr.alertDialogIcon)
+                    .setPositiveButton(android.R.string.ok,
+                            new DialogInterface.OnClickListener() {
+                                public void onClick(DialogInterface dialog,
+                                        int which) {
+                                    mRadioOff.setChecked(true);
+                                    mCurrMobile = MOBILE_DATA_OFF;
+                                    setMobileDataState();
+
+                                    Intent intent = new Intent();
+                                    intent.putExtra(EXTRA_MOBILE_DATA_INDEX,
+                                            MOBILE_DATA_OFF);
+                                    setResult(RESULT_OK, intent);
+                                    mAlertDialog.dismiss();
+                                    offindex = 0;
+                                    finish();
+                                }
+                            })
+                    .setNegativeButton(android.R.string.cancel,
+                            new DialogInterface.OnClickListener() {
+                                public void onClick(DialogInterface dialog,
+                                        int which) {
+                                    offindex = 0;
+                                    mAlertDialog.dismiss();
+                                    dialog.dismiss();
+                                    finish();
+                                }
+                            }).setTitle(R.string.data_connect_select)
+                    .setMessage(R.string.data_connect_select_confirm).create();
+            ConfirmAlertDialog.setCancelable(false);
+            ConfirmAlertDialog.getWindow().setType(
+                    WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG);
+            ConfirmAlertDialog.getWindow().addFlags(
+                    WindowManager.LayoutParams.FLAG_DIM_BEHIND);
+            if (!ConfirmAlertDialog.isShowing()) {
+                ConfirmAlertDialog.show();
+            }
+            break;
+        default:
+            index = MOBILE_DATA_NULL;
+            break;
+        }
+
+        if (offindex != 1) {
+            mCurrMobile = index;
+            setMobileDataState();
+
+            Intent intent = new Intent();
+            intent.putExtra(EXTRA_MOBILE_DATA_INDEX, index);
+            setResult(RESULT_OK, intent);
+            mAlertDialog.dismiss();
+            finish();
+            overridePendingTransition(0, 0);
+        }
+    }
+
+    private void setMobileDataState() {
+        Log.d(TAG, "setMobileDataState, mCurrMobile = " + mCurrMobile);
+        boolean enable;
+        if (mCurrMobile == MOBILE_DATA_OFF) {
+            saveMobileDataIndex();
+            enable = false;
+            mTelephonyManager.setDataEnabled(enable);
+        } else {
+            enable = true;
+            int subid = mEntryValuesSubid[mCurrMobile];
+            Log.d(TAG, "setMobileDataState, subid = " + subid);
+            mTelephonyManager.setDataEnabled(subid, enable);
+            setDataPreferredSubscription(subid);
+        }
+
+        int phoneCount = mTelephonyManager.getPhoneCount();
+        for (int i = 0; i < phoneCount; i++) {
+            Settings.Global.putInt(getContentResolver(),
+                    Settings.Global.MOBILE_DATA + i, enable ? 1 : 0);
+        }
+
+    }
+
+    private void saveMobileDataIndex() {
+        SharedPreferences.Editor editor = mSharedPre.edit();
+        editor.putInt(SP_MOBILE_DATA_INDEX, mCurrMobile);
+        editor.commit();
+    }
+
+    private void resetRadio() {
+        for (RadioButton radio : mRadios) {
+            radio.setChecked(false);
+        }
+    }
+
+    private boolean isAirplaneModeOn() {
+        return (Settings.Global.getInt(getContentResolver(),
+                Settings.Global.AIRPLANE_MODE_ON, 0) != 0);
+    }
+
+    public void onDismiss(DialogInterface dialog) {
+        mAlertDialog = null;
+        finish();
+    }
+
+    private void showSelectDialog() {
+        mAlertDialog = new AlertDialog.Builder(this)
+                .setTitle(R.string.data_connect_select).setView(mView)
+                .setOnDismissListener(this).create();
+        mAlertDialog.getWindow().setType(
+                WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG);
+        mAlertDialog.getWindow().addFlags(
+                WindowManager.LayoutParams.FLAG_DIM_BEHIND);
+        mAlertDialog.show();
+    }
+
+    private void updateState_alertdialog() {
+        if (isAirplaneModeOn()) {
+
+            mSim1Layout.setClickable(false);
+            mSim2Layout.setClickable(false);
+            mOffLayout.setClickable(false);
+
+            for (RadioButton radio : mRadios) {
+                radio.setClickable(false);
+            }
+
+        } else {
+            mSim1Layout.setClickable(true);
+            mSim2Layout.setClickable(true);
+            mOffLayout.setClickable(true);
+
+            for (RadioButton radio : mRadios) {
+                radio.setClickable(true);
+            }
+
+        }
+    }
+
+    private void initUI_alertdialog() {
+
+        LayoutInflater inflater = LayoutInflater.from(this);
+
+        mView = inflater.inflate(R.layout.sim_dataconnect_select, null);
+        int slotId;
+        boolean isReady;
+
+        mSim1Layout = mView.findViewById(R.id.key_sim1);
+        mSim2Layout = mView.findViewById(R.id.key_sim2);
+        mOffLayout = mView.findViewById(R.id.key_off);
+
+        mTextSim1 = (TextView) mView.findViewById(R.id.key_sim1_tv);
+        mTextSim2 = (TextView) mView.findViewById(R.id.key_sim2_tv);
+
+        if (mActiveSubCount <= 0) {
+            mSim1Layout.setVisibility(View.GONE);
+            mSim2Layout.setVisibility(View.GONE);
+        } else {
+            isReady = mTelephonyManager.getSimState(0) == SIM_STATE_READY;
+
+            if (isReady) {
+                mSim1Layout.setOnClickListener(this);
+                if (mDisplaynameSim1 != null)
+                    mTextSim1.setText(mDisplaynameSim1);
+            } else {
+                mSim1Layout.setVisibility(View.GONE);
+            }
+
+            isReady = mTelephonyManager.getSimState(1) == SIM_STATE_READY;
+            if (isReady) {
+                mSim2Layout.setOnClickListener(this);
+                if (mDisplaynameSim2 != null)
+                    mTextSim2.setText(mDisplaynameSim2);
+            } else {
+                mSim2Layout.setVisibility(View.GONE);
+            }
+        }
+        mView.findViewById(R.id.key_off).setOnClickListener(this);
+        mRadioSim1 = (RadioButton) mView.findViewById(R.id.key_sim1_rb);
+        mRadioSim2 = (RadioButton) mView.findViewById(R.id.key_sim2_rb);
+        mRadioOff = (RadioButton) mView.findViewById(R.id.key_off_rb);
+        mRadioSim1.setOnClickListener(this);
+        mRadioSim2.setOnClickListener(this);
+        mRadioOff.setOnClickListener(this);
+
+        mRadios[MOBILE_DATA_SIM1] = mRadioSim1;
+        mRadios[MOBILE_DATA_SIM2] = mRadioSim2;
+        mRadios[MOBILE_DATA_OFF] = mRadioOff;
+    }
+
+}

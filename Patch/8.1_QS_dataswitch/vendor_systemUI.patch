
diff --git a/packages/SystemUI/res/values/config.xml b/packages/SystemUI/res/values/config.xml
index 02ec9f3..b13c2b6 100644
--- a/packages/SystemUI/res/values/config.xml
+++ b/packages/SystemUI/res/values/config.xml
@@ -23,7 +23,7 @@
     <!-- SPRD: Bug696307 - FEATURE_SHOW_LTE_TILE_IN_PANEL @{ -->
     <string name="feature_system_extra_tile" translatable="false">plugin.sprd.systemuifeatures.qstile.SystemUIQsTileUtils</string>
     <string name="quick_settings_tiles_default" translatable="false">
-        volte1,volte2,wifi,bt,dnd,data,longscreenshot,lte,lte2,vowifi,flashlight,rotation,battery,airplane,cast,audioprofile,location
+        dataswitch,volte1,volte2,wifi,bt,dnd,data,longscreenshot,lte,lte2,vowifi,flashlight,rotation,battery,airplane,cast,audioprofile,location
     </string>
     <bool name="config_show_lte_tile">true</bool>
     <!-- @} -->
@@ -54,7 +54,7 @@
     <string name="feature_audioprofile_systemui" translatable="false">plugin.sprd.systemuiaudioprofile.SystemUIAudioProfile</string>
      <!-- SPRD 692442 Tiles native to System UI. Order should match "quick_settings_tiles_default" -->
     <string name="quick_settings_tiles_stock" translatable="false">
-        volte1,volte2,wifi,battery,dnd,data,longscreenshot,lte,lte2,vowifi,flashlight,rotation,bt,airplane,location,hotspot,inversion,saver,work,cast,night,audioprofile
+        dataswitch,volte1,volte2,wifi,battery,dnd,data,longscreenshot,lte,lte2,vowifi,flashlight,rotation,bt,airplane,location,hotspot,inversion,saver,work,cast,night,audioprofile
     </string>
     <!-- @} -->
     <!-- SPRD: modify for bug688768 -->
@@ -80,4 +80,6 @@
     <bool name="config_showSplitVolteIcon">false</bool>
     <!-- SPRD: bug833682 allow the dataDisable icon to be displayed in status bar. -->
     <bool name="config_showDataDisable">false</bool>
+
+    <bool name="config_isShowDataSwitch_bool">true</bool>
 </resources>
diff --git a/packages/SystemUI/res/values/strings_ex.xml b/packages/SystemUI/res/values/strings_ex.xml
index 070997c..3e4af5d 100644
--- a/packages/SystemUI/res/values/strings_ex.xml
+++ b/packages/SystemUI/res/values/strings_ex.xml
@@ -97,5 +97,7 @@
     <string name="vowifi_qs_tile_no_sim_toast">"Invalid SIM card"</string>
     <string name="vowifi_qs_tile_no_sim">"VoWiFi"</string>
     <!-- @} -->
+    <string name="quick_settings_dataswitch_tile_label">"DataSimSwitch"</string>
+
 </resources>
 
diff --git a/packages/SystemUI/src/com/android/systemui/qs/tiles/DataSwitchTile.java b/packages/SystemUI/src/com/android/systemui/qs/tiles/DataSwitchTile.java
new file mode 100644
index 0000000..69059e8
--- /dev/null
+++ b/packages/SystemUI/src/com/android/systemui/qs/tiles/DataSwitchTile.java
@@ -0,0 +1,162 @@
+package tiles;
+
+import android.content.Intent;
+import android.provider.Settings;
+import android.provider.SettingsEx;
+import android.service.quicksettings.Tile;
+import android.telephony.SubscriptionInfo;
+import android.telephony.SubscriptionManager;
+import android.telephony.TelephonyManager;
+import android.telephony.TelephonyManagerEx;
+import android.util.Log;
+
+import com.android.systemui.plugins.qs.QSTile;
+import com.android.systemui.qs.GlobalSetting;
+import com.android.systemui.qs.QSHost;
+import com.android.systemui.qs.tileimpl.QSTileImpl;
+import com.android.systemui.R;
+
+import java.util.List;
+
+public class DataSwitchTile extends QSTileImpl<QSTile.BooleanState> {
+
+    private final GlobalSetting mDefaultDataSetting;
+    private TelephonyManager mTelephonyManager;
+    private SubscriptionManager mSubscriptionManager;
+    private boolean mHasDataSwitchDone = true;
+    private static final int QS_DATASWITCH = 250;
+
+    public DataSwitchTile(QSHost host) {
+        super(host);
+        mTelephonyManager = TelephonyManager.from(mContext);
+        mSubscriptionManager = SubscriptionManager.from(mContext);
+        mDefaultDataSetting = new GlobalSetting(mContext, mHandler,
+                Settings.Global.MULTI_SIM_DATA_CALL_SUBSCRIPTION) {
+            @Override
+            protected void handleValueChanged(int value) {
+                Log.d(TAG, "handle default data changed value =" + value);
+                handleRefreshState(value);
+                mHasDataSwitchDone = true;
+            }
+        };
+        int dataSubId = SubscriptionManager.getDefaultDataSubscriptionId();
+        Log.d(TAG, "create tile,dataSubId =" + dataSubId);
+        handleRefreshState(dataSubId);
+
+    }
+
+    @Override
+    public BooleanState newTileState() {
+        return new BooleanState();
+    }
+
+    @Override
+    protected void handleClick() {
+        if (isAirplaneModeOn() || !isDualSimDataAvailable()) {
+            Log.d(TAG, "click now can not switch data sim, return");
+            return;
+        }
+        int currentDataSubId = SubscriptionManager.getDefaultDataSubscriptionId();
+        int[] activeSubIds = mSubscriptionManager.getActiveSubscriptionIdList();
+        if (activeSubIds.length != 2) {
+            mState.state = Tile.STATE_INACTIVE;
+            Log.d(TAG, "active sim count!=2,can not switch,return");
+            return;
+        }
+        if (mHasDataSwitchDone) {
+            mHasDataSwitchDone = false;
+            for (int i = 0; i < activeSubIds.length; i++) {
+                if (activeSubIds[i] != currentDataSubId) {
+                    mSubscriptionManager.setDefaultDataSubId(activeSubIds[i]);
+                    mTelephonyManager.setDataEnabled(activeSubIds[i], true);
+                    disableDataForOtherSubscriptions(activeSubIds[i]);
+                    refreshState();
+                }
+            }
+        } else {
+            Log.d(TAG, "mHasDataSwitchDone =false,wait");
+        }
+    }
+
+    @Override
+    protected void handleUpdateState(BooleanState state, Object arg) {
+        int defaultDataSubId = arg instanceof Integer ?
+                (Integer) arg : mDefaultDataSetting.getValue();
+        Log.d(TAG, "handle update state, default data subid =" + defaultDataSubId);
+        state.value = mTelephonyManager.getDataEnabled(defaultDataSubId);
+        state.label = getTileLabel();
+        if (SubscriptionManager.isValidSubscriptionId(defaultDataSubId)) {
+            int dataPhoneId = SubscriptionManager.getPhoneId(defaultDataSubId);
+            setCurrentSimIconByDataPhoneId(state, dataPhoneId);
+        }
+        if (!isAirplaneModeOn() && isDualSimDataAvailable()) {
+            state.state = Tile.STATE_ACTIVE;
+        } else {
+            state.state = Tile.STATE_INACTIVE;
+        }
+    }
+
+    private void setCurrentSimIconByDataPhoneId(BooleanState state, int dataPhoneId) {
+        Log.d(TAG, "set sim icon dataPhoneId=" + dataPhoneId);
+        if (dataPhoneId == 0) {
+            state.icon = ResourceIcon.get(R.drawable.ic_qs_mobile_data_on);
+        } else if (dataPhoneId == 1) {
+            state.icon = ResourceIcon.get(R.drawable.ic_signal_airplane);
+        }
+    }
+
+    @Override
+    public int getMetricsCategory() {
+        return QS_DATASWITCH;
+    }
+
+    @Override
+    public Intent getLongClickIntent() {
+        return null;
+    }
+
+    @Override
+    protected void handleSetListening(boolean listening) {
+        mDefaultDataSetting.setListening(listening);
+    }
+
+    @Override
+    public CharSequence getTileLabel() {
+        return mContext.getString(R.string.quick_settings_dataswitch_tile_label);
+    }
+
+    public boolean isAirplaneModeOn() {
+        return Settings.Global.getInt(mContext.getContentResolver(),
+                Settings.Global.AIRPLANE_MODE_ON, 0) != 0;
+    }
+
+    private boolean isDualSimDataAvailable() {
+        boolean isDataAvailable = true;
+        int phoneCount = TelephonyManager.from(mContext).getPhoneCount();
+
+        for (int i = 0; i < phoneCount; i++) {
+            boolean isDataSimReady = SubscriptionManager
+                    .getSimStateForSlotIndex(i) == TelephonyManager.SIM_STATE_READY;
+            boolean isDataStandby = SubscriptionManager.isValidPhoneId(i)
+                    && TelephonyManagerEx.from(mContext).isSimEnabled(i);
+            isDataAvailable = isDataAvailable && (isDataSimReady && isDataStandby);
+        }
+        boolean bRadioBusy = (Settings.Global.getInt(mContext.getContentResolver(),
+                SettingsEx.GlobalEx.RADIO_BUSY, 0) == 1);
+        Log.d(TAG, "isDualSimDataAvailable isDataAvailable=" + isDataAvailable
+                + "isRadioBusy=" + bRadioBusy);
+        return !bRadioBusy && isDataAvailable;
+    }
+
+    private void disableDataForOtherSubscriptions(int subId) {
+        List<SubscriptionInfo> subInfoList = mSubscriptionManager.getActiveSubscriptionInfoList();
+        if (subInfoList != null) {
+            for (SubscriptionInfo subInfo : subInfoList) {
+                if (subInfo.getSubscriptionId() != subId
+                        && mTelephonyManager.getDataEnabled(subInfo.getSubscriptionId())) {
+                    mTelephonyManager.setDataEnabled(subInfo.getSubscriptionId(), false);
+                }
+            }
+        }
+    }
+}
